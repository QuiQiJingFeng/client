{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "pbjs",
    "require",
    "HEADER_SIZE",
    "protobuf",
    "Init",
    "self",
    "C2GS",
    "GS2C",
    "cc",
    "loader",
    "loadRes",
    "err",
    "res",
    "log",
    "root",
    "Root",
    "fromJSON",
    "lookup",
    "encode",
    "data",
    "msg",
    "fromObject",
    "buffer",
    "finish",
    "size",
    "length",
    "headBuf",
    "Buffer",
    "alloc",
    "writeUInt16BE",
    "newBuffer",
    "concat",
    "from",
    "console",
    "decode",
    "total_size",
    "header",
    "Uint16Array",
    "slice",
    "content_size",
    "copy",
    "module",
    "exports"
  ],
  "mappings": ";;AAAA,IAAIA,OAAOC,QAAQ,YAAR,CAAX;AACAA,QAAQ,QAAR;AACA,IAAIC,cAAc,CAAlB;;AAEA,IAAIC,WAAW,EAAf;;AAEAA,SAASC,IAAT,GAAgB,YAAW;AAC1B,OAAIC,OAAO,IAAX;AACGA,QAAKC,IAAL,GAAY,IAAZ;AACAD,QAAKE,IAAL,GAAY,IAAZ;AACA;AACA;AACAC,MAAGC,MAAH,CAAUC,OAAV,CAAmB,UAAnB,EAA+B,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAClD,UAAGD,GAAH,EAAO;AACNH,YAAGK,GAAH,CAAO,aAAP,EAAqBF,GAArB;AACA;AACA;AACD,UAAIG,OAAOd,KAAKe,IAAL,CAAUC,QAAV,CAAmBJ,GAAnB,CAAX;AACAP,WAAKC,IAAL,GAAYQ,KAAKG,MAAL,CAAY,MAAZ,CAAZ;AACAZ,WAAKE,IAAL,GAAYO,KAAKG,MAAL,CAAY,MAAZ,CAAZ;AACA,IARD;AASH,CAfD;;AAiBAd,SAASe,MAAT,GAAkB,UAASC,IAAT,EAAe;AAC7B,OAAId,OAAO,IAAX;AACH,OAAIe,MAAMf,KAAKC,IAAL,CAAUe,UAAV,CAAqBF,IAArB,CAAV;AACG,OAAIG,SAASjB,KAAKC,IAAL,CAAUY,MAAV,CAAiBE,GAAjB,EAAsBG,MAAtB,EAAb;;AAEA;AACH,OAAIC,OAAOF,OAAOG,MAAlB;AACA,OAAIC,UAAUC,OAAOC,KAAP,CAAa1B,WAAb,CAAd;AACAwB,WAAQG,aAAR,CAAsBL,IAAtB,EAA4B,CAA5B;;AAEA,OAAIM,YAAYH,OAAOI,MAAP,CAAc,CAACJ,OAAOK,IAAP,CAAYN,OAAZ,CAAD,EAAsBC,OAAOK,IAAP,CAAYV,MAAZ,CAAtB,CAAd,EAAyDI,QAAQD,MAAR,GAAiBH,OAAOG,MAAjF,CAAhB;AACAQ,WAAQpB,GAAR,CAAY,eAAZ,EAA4BiB,SAA5B;AACG,UAAOA,SAAP;AACH,CAbD;;AAeA3B,SAAS+B,MAAT,GAAkB,UAASZ,MAAT,EAAiB;AAC/B,OAAIjB,OAAO,IAAX;AACH,OAAI8B,aAAab,OAAOG,MAAxB;;AAEG,OAAGU,aAAajC,WAAhB,EAA4B;AACxB,aAAO,IAAP;AACH;AACD;AACA,OAAIkC,SAAS,IAAIC,WAAJ,CAAgBf,OAAOgB,KAAP,CAAa,CAAb,EAAepC,WAAf,CAAhB,CAAb;AACA,OAAIqC,eAAeH,OAAO,CAAP,IAAY,GAAZ,GAAkBA,OAAO,CAAP,CAArC;;AAEA;AACA,OAAID,aAAaI,eAAerC,WAAhC,EAA6C;AACzC,aAAO,IAAP;AACH;;AAED,OAAIiB,OAAO,IAAIQ,MAAJ,CAAWY,YAAX,CAAX;AACHjB,UAAOgB,KAAP,CAAapC,WAAb,EAAyBA,cAAY,CAAZ,GAAcqC,YAAvC,EAAqDC,IAArD,CAA0DrB,IAA1D;;AAEA,UAAOd,KAAKC,IAAL,CAAU4B,MAAV,CAAiBf,IAAjB,CAAP,CAA8B;AAC9B,CApBD;AAqBAsB,OAAOC,OAAP,GAAiBvC,QAAjB",
  "file": "unknown",
  "sourcesContent": [
    "let pbjs = require(\"protobufjs\")\nrequire('buffer')\nlet HEADER_SIZE = 2\n\nlet protobuf = {};\n\nprotobuf.Init = function() {\n\tlet self = this;\n    self.C2GS = null;\n    self.GS2C = null;\n    //如果使用cc.loader.load加载则必须用cc.url.raw进行一次url转换\n    //如果使用cc.loader.loadRes则不需要转换,默认从resources里面拿,同时不需要指定后缀，也就意味着res里面不能存在同名的文件,即使是后缀不相同的\n    cc.loader.loadRes( \"protocol\", function( err, res) {\n    \tif(err){\n    \t\tcc.log(\"加载proto文件失败\",err);\n    \t\treturn ;\n    \t}\n    \tlet root = pbjs.Root.fromJSON(res);\n    \tself.C2GS = root.lookup(\"C2GS\");\n    \tself.GS2C = root.lookup(\"GS2C\");\n    });\n}\n\nprotobuf.encode = function(data) {\n    let self = this;\n\tlet msg = self.C2GS.fromObject(data);\n    let buffer = self.C2GS.encode(msg).finish();\n\n    //添加包头\n\tlet size = buffer.length;\n\tlet headBuf = Buffer.alloc(HEADER_SIZE); \n\theadBuf.writeUInt16BE(size, 0);\n\n\tlet newBuffer = Buffer.concat([Buffer.from(headBuf),Buffer.from(buffer)],headBuf.length + buffer.length);\n\tconsole.log(\"newBuffer ==>\",newBuffer);\n    return newBuffer;\n}\n\nprotobuf.decode = function(buffer) {\n    let self = this;\n\tlet total_size = buffer.length;\n\n    if(total_size < HEADER_SIZE){\n        return null;\n    }\n    //取出前2个字节,计算出内容的长度\n    let header = new Uint16Array(buffer.slice(0,HEADER_SIZE));\n    let content_size = header[0] * 256 + header[1];\n\n    //如果数据没有接收完整\n    if (total_size < content_size + HEADER_SIZE) {\n        return null;\n    }\n\n    let data = new Buffer(content_size);\n\tbuffer.slice(HEADER_SIZE,HEADER_SIZE+1+content_size).copy(data);\n\n\treturn self.C2GS.decode(data);;\n}\nmodule.exports = protobuf;"
  ]
}