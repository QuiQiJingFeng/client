{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "pbjs",
    "require",
    "HEADER_SIZE",
    "C2GS",
    "GS2C",
    "protobuf",
    "module",
    "exports",
    "Init",
    "self",
    "cc",
    "loader",
    "loadRes",
    "err",
    "res",
    "log",
    "root",
    "Root",
    "fromJSON",
    "lookup",
    "buffer",
    "encode",
    "login",
    "account",
    "password",
    "platform",
    "version",
    "server_id",
    "device_id",
    "device_type",
    "channel",
    "locale",
    "net_mode",
    "device_platform",
    "data",
    "msg",
    "fromObject",
    "finish",
    "console",
    "size",
    "length",
    "headBuf",
    "Buffer",
    "writeUInt16BE",
    "newBuffer",
    "concat",
    "decode",
    "s",
    "slice",
    "readInt16BE",
    "copy"
  ],
  "mappings": ";;AAAA,IAAIA,OAAOC,QAAQ,YAAR,CAAX;AACAA,QAAQ,QAAR;AACA,IAAIC,cAAc,CAAlB;AACA,IAAIC,IAAJ,EAASC,IAAT;;AAEA,IAAIC,WAAWC,OAAOC,OAAtB;;AAEAF,SAASG,IAAT,GAAgB,YAAW;AAC1B,OAAIC,OAAO,IAAX;AACGC,MAAGC,MAAH,CAAUC,OAAV,CAAmB,eAAnB,EAAoC,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACvD,UAAGD,GAAH,EAAO;AACNH,YAAGK,GAAH,CAAO,kBAAP,EAA0BF,GAA1B;AACA;AACA;AACD;AACA,UAAIG,OAAOhB,KAAKiB,IAAL,CAAUC,QAAV,CAAmBJ,GAAnB,CAAX;AACAX,aAAOa,KAAKG,MAAL,CAAY,MAAZ,CAAP;AACAf,aAAOY,KAAKG,MAAL,CAAY,MAAZ,CAAP;;AAIA,UAAIC,SAASX,KAAKY,MAAL,CAAY;AAClBC,gBAAO;AACKC,qBAAQ,SADb;AAEKC,sBAAS,MAFd;AAGKC,sBAAS,UAHd;AAIKC,qBAAQ,OAJb;AAKKC,uBAAU,CALf;AAMKC,uBAAU,QANf;AAOKC,yBAAY,KAPjB;AAQKC,qBAAQ,UARb;AASKC,oBAAO,OATZ;AAUKC,sBAAS,IAVd;AAWKC,6BAAgB;AAXrB;AADW,OAAZ,CAAb;;AAgBD;AACA;;AAIC,IAjCD;AAkCH,CApCD;;AAsCA5B,SAASgB,MAAT,GAAkB,UAASa,IAAT,EAAe;AAChC,OAAIC,MAAMhC,KAAKiC,UAAL,CAAgBF,IAAhB,CAAV;AACG,OAAId,SAASjB,KAAKkB,MAAL,CAAYc,GAAZ,EAAiBE,MAAjB,EAAb;AACAC,WAAQvB,GAAR,CAAY,YAAZ,EAAyBK,MAAzB;AACA;AACH,OAAImB,OAAOnB,OAAOoB,MAAlB;AACA,OAAIC,UAAU,IAAIC,MAAJ,CAAWxC,WAAX,CAAd;AACAuC,WAAQE,aAAR,CAAsBJ,IAAtB,EAA4B,CAA5B;AACAD,WAAQvB,GAAR,CAAY,aAAZ,EAA0BK,MAA1B;AACA,OAAIwB,YAAYF,OAAOG,MAAP,CAAc,CAACJ,OAAD,EAASrB,MAAT,CAAd,EAA+BmB,OAAKrC,WAApC,CAAhB;AACA,UAAO0C,SAAP;AACA,CAXD;;AAaAvC,SAASyC,MAAT,GAAkB,UAAS1B,MAAT,EAAiB;AAClC,OAAImB,OAAOnB,OAAOoB,MAAlB;;AAEG,OAAGD,OAAOrC,WAAV,EAAsB;AAClB,aAAO,IAAP;AACH;;AAEHoC,WAAQvB,GAAR,CAAY,oBAAZ,EAAiCK,MAAjC;AACE,OAAI2B,IAAI3B,OAAO4B,KAAP,CAAa,CAAb,EAAe9C,WAAf,EAA4B+C,WAA5B,EAAR;;AAEA;AACA,OAAIV,OAAOQ,IAAI7C,WAAf,EAA4B;AACxB,aAAO,IAAP;AACH;;AAED,OAAIgC,OAAO,IAAIQ,MAAJ,CAAWK,CAAX,CAAX;AACH3B,UAAO4B,KAAP,CAAa9C,WAAb,EAAyBA,cAAY,CAAZ,GAAc6C,CAAvC,EAA0CG,IAA1C,CAA+ChB,IAA/C;;AAEA,OAAIC,MAAMhC,KAAK2C,MAAL,CAAYZ,IAAZ,CAAV;AACA,UAAOC,GAAP;AACA,CApBD",
  "file": "unknown",
  "sourcesContent": [
    "var pbjs = require(\"protobufjs\")\nrequire('buffer')\nvar HEADER_SIZE = 2\nvar C2GS,GS2C\n\nvar protobuf = module.exports;\n\nprotobuf.Init = function() {\n\tvar self = this;\n    cc.loader.loadRes( 'protocol.json', function( err, res) {\n    \tif(err){\n    \t\tcc.log(\"ERROR:PROTO INIT\",err);\n    \t\treturn ;\n    \t}\n    \t// var obj = JSON.stringify(res)\n    \tvar root = pbjs.Root.fromJSON(res);\n    \tC2GS = root.lookup(\"C2GS\");\n    \tGS2C = root.lookup(\"GS2C\");\n\n\n\n    \tvar buffer = self.encode({\n            login: {\n                        account:\"zhanghu\",\n                        password:\"mima\",\n                        platform:\"appstore\",\n                        version:\"1.0.0\",\n                        server_id:1,\n                        device_id:\"XEG-4L\",\n                        device_type:\"MI4\",\n                        channel:\"appstore\",\n                        locale:\"zh-CN\",\n                        net_mode:\"3G\",\n                        device_platform:\"IOS\"\n                    }\n        });\n\n    // var msg = protobuf.decode(buffer);\n    // cc.log(\"data=>\",JSON.stringify(msg));\n\n\n\n    });\n}\n\nprotobuf.encode = function(data) {\n\tvar msg = C2GS.fromObject(data);\n    var buffer = C2GS.encode(msg).finish();\n    console.log(\"buffer ==>\",buffer);\n    //添加包头\n\tvar size = buffer.length;\n\tvar headBuf = new Buffer(HEADER_SIZE); \n\theadBuf.writeUInt16BE(size, 0);\n\tconsole.log(\"headBuf ==>\",buffer);\n\tvar newBuffer = Buffer.concat([headBuf,buffer],size+HEADER_SIZE);\n\treturn newBuffer;\n}\n\nprotobuf.decode = function(buffer) {\n\tvar size = buffer.length;\n\n    if(size < HEADER_SIZE){\n        return null;\n    }\n \t\n \tconsole.log(\"origin buffer =>\\n\",buffer);\n    var s = buffer.slice(0,HEADER_SIZE).readInt16BE();\n\n    //如果数据没有接收完整\n    if (size < s + HEADER_SIZE) {\n        return null;\n    }\n\n    var data = new Buffer(s);\n\tbuffer.slice(HEADER_SIZE,HEADER_SIZE+1+s).copy(data);\n\n\tvar msg = C2GS.decode(data);\n\treturn msg;\n}\n\n"
  ]
}