{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "FYDNet",
    "Init",
    "self",
    "socket",
    "undefined",
    "Connect",
    "call_back",
    "url",
    "WebSocket",
    "onopen",
    "event",
    "onerror",
    "DisConnect",
    "onclose",
    "onmessage",
    "cc",
    "sys",
    "isNative",
    "msg",
    "app",
    "Proto",
    "decode",
    "data",
    "obj",
    "JSON",
    "parse",
    "event_name",
    "Object",
    "keys",
    "Event",
    "DispatchEvent",
    "fileReader",
    "FileReader",
    "onload",
    "progressEvent",
    "result",
    "readAsArrayBuffer",
    "close",
    "Send",
    "buffer",
    "encode",
    "send",
    "RegisterEvent",
    "handle",
    "module",
    "exports"
  ],
  "mappings": ";;AAAA,IAAIA,SAAS,EAAb;;AAEAA,OAAOC,IAAP,GAAc,YAAW;AACrB,QAAIC,OAAO,IAAX;AACAA,SAAKC,MAAL,GAAcC,SAAd;AACH,CAHD;;AAKAJ,OAAOK,OAAP,GAAiB,UAASC,SAAT,EAAoB;AACjC,QAAIJ,OAAO,IAAX;AACA,QAAGA,KAAKC,MAAR,EAAgB;AACZ,eAAOG,WAAP;AACH;AACD,QAAIC,MAAM,qBAAV;AACAL,SAAKC,MAAL,GAAc,IAAIK,SAAJ,CAAcD,GAAd,CAAd;AACAL,SAAKC,MAAL,CAAYM,MAAZ,GAAqB,UAAUC,KAAV,EAAiB;AAClC,YAAGJ,SAAH,EACIA;AACP,KAHD;;AAKAJ,SAAKC,MAAL,CAAYQ,OAAZ,GAAsB,UAAUD,KAAV,EAAiB;AACnCR,aAAKU,UAAL;AACH,KAFD;;AAIAV,SAAKC,MAAL,CAAYU,OAAZ,GAAsB,UAAUH,KAAV,EAAiB;AACnCR,aAAKU,UAAL;AACH,KAFD;;AAIAV,SAAKC,MAAL,CAAYW,SAAZ,GAAwB,UAAUJ,KAAV,EAAiB;AACrC,YAAGK,GAAGC,GAAH,CAAOC,QAAV,EAAoB;AAChB,gBAAIC,MAAMC,IAAIC,KAAJ,CAAUC,MAAV,CAAiBX,MAAMY,IAAvB,CAAV;AACA,gBAAIC,MAAMC,KAAKC,KAAL,CAAWP,GAAX,CAAV;AACA,gBAAIQ,aAAaC,OAAOC,IAAP,CAAYL,GAAZ,EAAiB,CAAjB,CAAjB;AACAJ,gBAAIU,KAAJ,CAAUC,aAAV,CAAwBJ,UAAxB,EAAmCH,IAAIG,UAAJ,CAAnC;AACH,SALD,MAKM;AACF,gBAAIK,aAAa,IAAIC,UAAJ,EAAjB;AACAD,uBAAWE,MAAX,GAAqB,UAASC,aAAT,EAAwB;AACzC,oBAAIhB,MAAMC,IAAIC,KAAJ,CAAUC,MAAV,CAAiB,KAAKc,MAAtB,CAAV;AACA,oBAAIZ,MAAMC,KAAKC,KAAL,CAAWP,GAAX,CAAV;AACA,oBAAIQ,aAAaC,OAAOC,IAAP,CAAYL,GAAZ,EAAiB,CAAjB,CAAjB;AACAJ,oBAAIU,KAAJ,CAAUC,aAAV,CAAwBJ,UAAxB,EAAmCH,IAAIG,UAAJ,CAAnC;AACH,aALD;AAMAK,uBAAWK,iBAAX,CAA6B1B,MAAMY,IAAnC;AACH;AACJ,KAhBD;AAiBH,CArCD;;AAuCAtB,OAAOY,UAAP,GAAoB,YAAW;AAC3B,QAAIV,OAAO,IAAX;AACA,QAAGA,KAAKC,MAAR,EAAgB;AACZD,aAAKC,MAAL,CAAYkC,KAAZ;AACAnC,aAAKC,MAAL,GAAcC,SAAd;AACH;AACJ,CAND;;AAQAJ,OAAOsC,IAAP,GAAc,UAASpB,GAAT,EAAc;AACxB,QAAIhB,OAAO,IAAX;AACAA,SAAKG,OAAL,CAAa,YAAU;AACnB,YAAIkC,SAASpB,IAAIC,KAAJ,CAAUoB,MAAV,CAAiBtB,GAAjB,CAAb;AACAhB,aAAKC,MAAL,CAAYsC,IAAZ,CAAiBF,MAAjB;AACH,KAHD;AAIH,CAND;;AAQAvC,OAAO0C,aAAP,GAAuB,UAAShB,UAAT,EAAoBiB,MAApB,EAA4B;AAC/C,QAAIzC,OAAO,IAAX;AACAiB,QAAIU,KAAJ,CAAUa,aAAV,CAAwBhB,UAAxB,EAAmCiB,MAAnC;AACH,CAHD;;AAKAC,OAAOC,OAAP,GAAiB7C,MAAjB",
  "file": "unknown",
  "sourcesContent": [
    "let FYDNet = {};\n\nFYDNet.Init = function() {\n    let self = this;\n    self.socket = undefined;\n}\n\nFYDNet.Connect = function(call_back) {\n    let self = this;    \n    if(self.socket) {\n        return call_back();\n    }\n    let url = \"ws://127.0.0.1:8888\";\n    self.socket = new WebSocket(url);\n    self.socket.onopen = function (event) {\n        if(call_back)\n            call_back();\n    };\n\n    self.socket.onerror = function (event) {\n        self.DisConnect();\n    };\n\n    self.socket.onclose = function (event) {\n        self.DisConnect();\n    };\n    \n    self.socket.onmessage = function (event) {\n        if(cc.sys.isNative) {\n            let msg = app.Proto.decode(event.data);\n            let obj = JSON.parse(msg);\n            let event_name = Object.keys(obj)[0];\n            app.Event.DispatchEvent(event_name,obj[event_name]);\n        }else {\n            var fileReader = new FileReader();  \n            fileReader.onload  = function(progressEvent) { \n                let msg = app.Proto.decode(this.result);  \n                let obj = JSON.parse(msg);\n                let event_name = Object.keys(obj)[0];\n                app.Event.DispatchEvent(event_name,obj[event_name]);\n            };  \n            fileReader.readAsArrayBuffer(event.data); \n        }\n    };\n}\n\nFYDNet.DisConnect = function() {\n    let self = this;\n    if(self.socket) {\n        self.socket.close();\n        self.socket = undefined; \n    }\n}\n\nFYDNet.Send = function(msg) {\n    let self = this;\n    self.Connect(function(){\n        let buffer = app.Proto.encode(msg);\n        self.socket.send(buffer);\n    });\n}\n\nFYDNet.RegisterEvent = function(event_name,handle) {\n    let self = this;\n    app.Event.RegisterEvent(event_name,handle);\n}\n\nmodule.exports = FYDNet;\n"
  ]
}