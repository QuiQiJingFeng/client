{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "login_logic",
    "Init",
    "self",
    "RegisterNetEvent",
    "RegisterLogicEvent",
    "account",
    "password",
    "login_path",
    "register_path",
    "server_list_path",
    "appNet",
    "RegisterEvent",
    "data",
    "cc",
    "log",
    "appEvent",
    "type",
    "Mu77Login",
    "Mu77Register",
    "LoginServer",
    "platform",
    "appUtils",
    "GetPlatform",
    "version",
    "server_id",
    "device_id",
    "device_type",
    "channel",
    "locale",
    "net_mode",
    "device_platform",
    "send_msg",
    "login",
    "Send",
    "msg",
    "post_data",
    "SendPostRequest",
    "content",
    "value",
    "JSON",
    "parse",
    "result",
    "DispatchEvent",
    "GetServerList",
    "call_back",
    "SendGetRequest",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "let login_logic = {};\n\nlogin_logic.Init = function() {\n    let self = this;\n    self.RegisterNetEvent();\n    self.RegisterLogicEvent();\n    self.account = null;\n    self.password = null;\n    self.login_path = \"http://127.0.0.1:3000/login\";\n    self.register_path = \"http://127.0.0.1:3000/register\";\n    self.server_list_path = \"http://127.0.0.1:3000/server_list.js\"\n}\n\nlogin_logic.RegisterNetEvent = function() {\n   appNet.RegisterEvent(\"login_ret\",function(data) {\n        //load new scene\n        cc.log(\"login success\");\n   });\n}\n\nlogin_logic.RegisterLogicEvent = function() {\n    let self = this;\n\n    appEvent.RegisterEvent(\"LOGIN_LOGIC\",function(type,data){\n        switch(type) {\n            case \"MU77LOGIN\":{\n                self.Mu77Login(data);\n            }break;\n            case \"MU77REGISTER\":{\n                self.Mu77Register(data);\n            }break;\n            case \"LOGINSERVER\":{\n                self.LoginServer();\n            }break;\n        }\n    });\n}\n\nlogin_logic.LoginServer = function() {\n        let self = this;\n        let data = {}\n        data.platform = appUtils.GetPlatform();\n        data.account = self.account;\n        data.password = self.password;\n        data.version = \"1.0.0\";\n        data.server_id = 1;\n        data.device_id = \"XEG-4L\";\n        data.device_type = \"MI4\";\n        data.channel = \"mu77\";\n        data.locale = \"zh-CN\";\n        data.net_mode = \"3G\";\n        data.device_platform = \"IOS\";\n        let send_msg = {login:data};\n        appNet.Send(send_msg);\n}\n\nlogin_logic.Mu77Login = function(msg) {\n        let self = this;\n        self.account = msg.account;\n        self.password = msg.password;\n        let post_data = {\"action\":\"login\",\"account\":msg.account,\"password\":msg.password};\n        appUtils.SendPostRequest(self.login_path,post_data,function(content){\n            let value = JSON.parse(content);\n            if(value.result == \"success\") {\n                appEvent.DispatchEvent(\"LOGIN_VIEW_MODE\",\"SERVER_LIST\");\n            }else {\n                //TODO 显示提示  登陆失败\n            }\n        });\n}\n\nlogin_logic.Mu77Register = function(msg) {\n        let self = this;\n        self.account = msg.account;\n        self.password = msg.password;\n        let result = false;\n        let post_data = {\"action\":\"register\",\"account\":msg.account,\"password\":msg.password};\n        appUtils.SendPostRequest(self.register_path,post_data,function(content){\n            let value = JSON.parse(content);\n            if(value.result == \"success\") {\n                appEvent.DispatchEvent(\"LOGIN_VIEW_MODE\",\"SERVER_LIST\");\n            }else {\n                //TODO 显示提示  注册失败\n            }\n        });\n}\n\nlogin_logic.GetServerList = function(call_back) {\n        let self = this;\n        cc.log(\"sending-----------\");\n        appUtils.SendGetRequest(self.server_list_path,function(content){\n            cc.log(\"FYD====>\",content);\n            let value = JSON.parse(content);\n            call_back(value);\n        });\n}\n\n\n\nmodule.exports = login_logic;\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}