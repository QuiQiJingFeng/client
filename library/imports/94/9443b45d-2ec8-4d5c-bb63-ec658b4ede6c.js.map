{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "login_logic",
    "Init",
    "self",
    "RegisterNetEvent",
    "RegisterLogicEvent",
    "login_path",
    "register_path",
    "appNet",
    "RegisterEvent",
    "data",
    "cc",
    "log",
    "JSON",
    "stringify",
    "appEvent",
    "Mu77Login",
    "Mu77Register",
    "msg",
    "post_data",
    "account",
    "password",
    "appUtils",
    "SendPostRequest",
    "content",
    "value",
    "parse",
    "result",
    "DispatchEvent",
    "status",
    "module",
    "exports"
  ],
  "mappings": ";;AAAA,IAAIA,cAAc,EAAlB;;AAEAA,YAAYC,IAAZ,GAAmB,YAAW;AAC1B,QAAIC,OAAO,IAAX;AACAA,SAAKC,gBAAL;AACAD,SAAKE,kBAAL;;AAEAF,SAAKG,UAAL,GAAkB,6BAAlB;AACAH,SAAKI,aAAL,GAAqB,gCAArB;AACH,CAPD;;AASAN,YAAYG,gBAAZ,GAA+B,YAAW;AACvCI,WAAOC,aAAP,CAAqB,WAArB,EAAiC,UAASC,IAAT,EAAe;AAC3C;AACAC,WAAGC,GAAH,CAAO,cAAP,EAAsBC,KAAKC,SAAL,CAAeJ,IAAf,CAAtB;AAEH,KAJF;AAKF,CAND;;AAQAT,YAAYI,kBAAZ,GAAiC,YAAW;AACxC,QAAIF,OAAO,IAAX;AACAY,aAASN,aAAT,CAAuB,YAAvB,EAAoC,UAASC,IAAT,EAAc;AAC9CP,aAAKa,SAAL,CAAeN,IAAf;AACH,KAFD;;AAKAK,aAASN,aAAT,CAAuB,eAAvB,EAAuC,UAASC,IAAT,EAAc;AACjDP,aAAKc,YAAL,CAAkBP,IAAlB;AACH,KAFD;AAGH,CAVD;;AAYAT,YAAYe,SAAZ,GAAwB,UAASE,GAAT,EAAc;AAC9B,QAAIf,OAAO,IAAX;AACAA,SAAKO,IAAL,GAAYQ,GAAZ;AACA,QAAIC,YAAY,EAAC,UAAS,OAAV,EAAkB,WAAUD,IAAIE,OAAhC,EAAwC,YAAWF,IAAIG,QAAvD,EAAhB;AACAC,aAASC,eAAT,CAAyBpB,KAAKG,UAA9B,EAAyCa,SAAzC,EAAmD,UAASK,OAAT,EAAiB;AAChEb,WAAGC,GAAH,CAAO,aAAP,EAAqBY,OAArB;AACA,YAAIC,QAAQZ,KAAKa,KAAL,CAAWF,OAAX,CAAZ;AACA,YAAGC,MAAME,MAAN,IAAgB,SAAnB,EAA8B;AAC1BZ,qBAASa,aAAT,CAAuB,eAAvB,EAAuCH,KAAvC;AACH,SAFD,MAEM;AACFV,qBAASa,aAAT,CAAuB,eAAvB,EAAuCH,MAAME,MAA7C;AACH;AACJ,KARD,EAQE,UAASE,MAAT,EAAgB;AACdlB,WAAGC,GAAH,CAAOT,KAAKG,UAAZ,EAAuB,4BAAvB,EAAoDuB,MAApD;AACH,KAVD;AAWP,CAfD;;AAiBA5B,YAAYgB,YAAZ,GAA2B,UAASC,GAAT,EAAc;AACjC,QAAIf,OAAO,IAAX;AACA,QAAIwB,SAAS,KAAb;AACA,QAAIR,YAAY,EAAC,UAAS,UAAV,EAAqB,WAAUD,IAAIE,OAAnC,EAA2C,YAAWF,IAAIG,QAA1D,EAAhB;AACAC,aAASC,eAAT,CAAyBpB,KAAKI,aAA9B,EAA4CY,SAA5C,EAAsD,UAASK,OAAT,EAAiB;AACnEb,WAAGC,GAAH,CAAO,aAAP,EAAqBY,OAArB;AACA,YAAIC,QAAQZ,KAAKa,KAAL,CAAWF,OAAX,CAAZ;AACA,YAAGC,MAAME,MAAN,IAAgB,SAAnB,EAA8B;AAC1BZ,qBAASa,aAAT,CAAuB,eAAvB,EAAuCH,KAAvC;AACH,SAFD,MAEM;AACFV,qBAASa,aAAT,CAAuB,eAAvB,EAAuCH,MAAME,MAA7C;AACH;AACJ,KARD,EAQE,UAASE,MAAT,EAAgB;AACdlB,WAAGC,GAAH,CAAOT,KAAKG,UAAZ,EAAuB,4BAAvB,EAAoDuB,MAApD;AACH,KAVD;AAWP,CAfD;;AAkBAC,OAAOC,OAAP,GAAiB9B,WAAjB;;AAGA",
  "file": "unknown",
  "sourcesContent": [
    "let login_logic = {};\n\nlogin_logic.Init = function() {\n    let self = this;\n    self.RegisterNetEvent();\n    self.RegisterLogicEvent();\n\n    self.login_path = \"http://127.0.0.1:3000/login\";\n    self.register_path = \"http://127.0.0.1:3000/register\";\n}\n\nlogin_logic.RegisterNetEvent = function() {\n   appNet.RegisterEvent(\"login_ret\",function(data) {\n        //,,,,,\n        cc.log(\"login msg ->\",JSON.stringify(data));\n        \n    });\n}\n\nlogin_logic.RegisterLogicEvent = function() {\n    let self = this;\n    appEvent.RegisterEvent(\"mu77_login\",function(data){\n        self.Mu77Login(data);\n    });\n\n\n    appEvent.RegisterEvent(\"mu77_register\",function(data){\n        self.Mu77Register(data);\n    });\n}\n\nlogin_logic.Mu77Login = function(msg) {\n        let self = this;\n        self.data = msg;\n        let post_data = {\"action\":\"login\",\"account\":msg.account,\"password\":msg.password};\n        appUtils.SendPostRequest(self.login_path,post_data,function(content){\n            cc.log(\"content => \",content);\n            let value = JSON.parse(content);\n            if(value.result == \"success\") {\n                appEvent.DispatchEvent(\"login_success\",value)\n            }else {\n                appEvent.DispatchEvent(\"login_failure\",value.result)\n            }\n        },function(status){\n            cc.log(self.login_path,\"request error:==>status = \",status);\n        });\n}\n\nlogin_logic.Mu77Register = function(msg) {\n        let self = this;\n        let result = false;\n        let post_data = {\"action\":\"register\",\"account\":msg.account,\"password\":msg.password};\n        appUtils.SendPostRequest(self.register_path,post_data,function(content){\n            cc.log(\"content => \",content);\n            let value = JSON.parse(content);\n            if(value.result == \"success\") {\n                appEvent.DispatchEvent(\"login_success\",value)\n            }else {\n                appEvent.DispatchEvent(\"login_failure\",value.result)\n            }\n        },function(status){\n            cc.log(self.login_path,\"request error:==>status = \",status);\n        });\n}\n \n\nmodule.exports = login_logic;\n\n\n/*\n\n        if(cc.sys.isNative){\n            data.platform = cc.sys.platform;\n        }else{\n            data.platform = sys.os;         //browser windows android ios\n        }\n        data.version = \"1.0.0\";\n        data.server_id = 1;\n        data.device_id = \"XEG-4L\";\n        data.device_type = \"MI4\";\n        data.channel = data.login_type;\n        data.locale = \"zh-CN\";\n        data.net_mode = \"3G\";\n        data.device_platform = \"IOS\";\n\n        let send_msg = {login:data};\n        appNet.Send(send_msg);\n*/\n\n\n\n\n\n\n\n\n\n\n"
  ]
}