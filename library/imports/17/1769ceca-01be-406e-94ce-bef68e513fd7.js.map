{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "item",
    "Prefab",
    "onLoad",
    "self",
    "_vertical",
    "node",
    "getComponent",
    "vertical",
    "view_port",
    "getChildByName",
    "box",
    "getBoundingBox",
    "content",
    "template",
    "instantiate",
    "item_size",
    "getContentSize",
    "item_anchor",
    "getAnchorPoint",
    "reuse_pool",
    "used_cells",
    "LoadData",
    "data",
    "removeAllChildren",
    "offset_y",
    "y",
    "height",
    "offset_x",
    "x",
    "width",
    "unit_x",
    "unit_y",
    "last_x",
    "last_y",
    "i",
    "length",
    "pos",
    "p",
    "word_pos",
    "convertToWorldSpace",
    "new_pos",
    "convertToNodeSpace",
    "log",
    "is_contain",
    "rectContainsPoint",
    "setPosition",
    "addChild",
    "setContentSize",
    "size",
    "update",
    "dt"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        item: cc.Prefab\n    },\n    //代码加载完毕\n    onLoad: function () {\n        let self = this;\n        //是否为竖直方向\n        self._vertical = self.node.getComponent(\"cc.ScrollView\").vertical;\n        //视口\n        self.view_port = self.node.getChildByName(\"view\");\n        self.box = self.view_port.getBoundingBox();\n        //内容节点\n        self.content = self.view_port.getChildByName(\"content\");\n\n\n        let template = cc.instantiate(self.item);\n        self.item_size = template.getContentSize();\n        self.item_anchor = template.getAnchorPoint();\n\n        \n        self.reuse_pool = {};\n        self.used_cells = {};\n    },\n\n    LoadData: function (data) {\n        let self = this;\n\n        self.content.removeAllChildren();\n        let offset_y = (1 - self.item_anchor.y) * self.item_size.height\n        let offset_x = self.item_anchor.x * self.item_size.width\n        let unit_x = self.item_size.width\n        let unit_y = 0\n        if (self._vertical) {\n            unit_x = 0\n            unit_y = self.item_size.height\n        }\n        let last_x,last_y\n        for (let i = 0; i < data.length; ++i) {\n            let x = offset_x + unit_x * i\n            let y = -1 * (offset_y + unit_y * i)\n            let pos = cc.p(x,y);\n            //世界坐标点\n            let word_pos = self.content.convertToWorldSpace(pos);\n            let new_pos = self.view_port.convertToNodeSpace(pos);\n            cc.log(\"new_pos=>\",new_pos);\n            cc.log(\"self.box=>\",self.box);\n            let is_contain = cc.rectContainsPoint(self.box,pos);\n            if(is_contain) {\n                let item = cc.instantiate(self.item);\n                item.setPosition(cc.p(x,y));\n                self.content.addChild(item);\n            }\n            last_x = x;\n            last_y = y;\n        }\n        let width = last_x + self.item_size.width * self.item_anchor.x\n        let height = -last_y + self.item_size.height * (1 - self.item_anchor.y)\n        self.content.setContentSize(cc.size(width,height));\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function (dt) {\n\n    },\n});\n"
  ]
}